# HG changeset patch
# Parent 9ad5dd5c1dd14e5fe76170db1a53220b57cb025c
Bug 704110 - The WebConsole should use the DevTools CSS theme (dark theme)

diff --git a/browser/devtools/webconsole/HUDService.jsm b/browser/devtools/webconsole/HUDService.jsm
--- a/browser/devtools/webconsole/HUDService.jsm
+++ b/browser/devtools/webconsole/HUDService.jsm
@@ -3756,17 +3756,17 @@ HeadsUpDisplay.prototype = {
     this.consoleWrap = consoleWrap;
     consoleWrap.setAttribute("class", "hud-console-wrapper");
     consoleWrap.setAttribute("flex", "1");
 
     this.filterSpacer = this.makeXULNode("spacer");
     this.filterSpacer.setAttribute("flex", "1");
 
     this.filterBox = this.makeXULNode("textbox");
-    this.filterBox.setAttribute("class", "compact hud-filter-box");
+    this.filterBox.className = "compact hud-filter-box devtools-searchinput";
     this.filterBox.setAttribute("hudId", this.hudId);
     this.filterBox.setAttribute("placeholder", this.getStr("stringFilter"));
     this.filterBox.setAttribute("type", "search");
 
     this.setFilterTextBoxEvents();
 
     this.createConsoleMenu(this.consoleWrap);
 
@@ -3787,16 +3787,17 @@ HeadsUpDisplay.prototype = {
     hintParentNode.hidden = true;
 
     let hbox = this.makeXULNode("hbox");
     hbox.setAttribute("flex", "1");
     hbox.setAttribute("class", "gcliterm-display");
 
     this.outputNode = this.makeXULNode("richlistbox");
     this.outputNode.setAttribute("class", "hud-output-node");
+
     this.outputNode.setAttribute("flex", "1");
     this.outputNode.setAttribute("orient", "vertical");
     this.outputNode.setAttribute("context", this.hudId + "-output-contextmenu");
     this.outputNode.setAttribute("style", "direction: ltr;");
     this.outputNode.setAttribute("seltype", "multiple");
 
     hbox.appendChild(hintParentNode);
     hbox.appendChild(this.outputNode);
@@ -3888,34 +3889,35 @@ HeadsUpDisplay.prototype = {
           { name: "ConsoleWarnings", prefKey: "warn" },
           { name: "ConsoleInfo", prefKey: "info" },
           { name: "ConsoleLog", prefKey: "log" }
         ]
       }
     ];
 
     let toolbar = this.makeXULNode("toolbar");
-    toolbar.setAttribute("class", "hud-console-filter-toolbar");
+    toolbar.setAttribute("class", "hud-console-filter-toolbar devtools-toolbar");
     toolbar.setAttribute("mode", "full");
 
 #ifdef XP_MACOSX
     this.makeCloseButton(toolbar);
 #endif
 
     for (let i = 0; i < BUTTONS.length; i++) {
       this.makeFilterButton(toolbar, BUTTONS[i]);
     }
 
+    this.makeClearConsoleButton(toolbar);
+
     toolbar.appendChild(this.filterSpacer);
 
     let positionUI = this.createPositionUI();
     toolbar.appendChild(positionUI);
 
     toolbar.appendChild(this.filterBox);
-    this.makeClearConsoleButton(toolbar);
 
 #ifndef XP_MACOSX
     this.makeCloseButton(toolbar);
 #endif
 
     return toolbar;
   },
 
@@ -3938,16 +3940,17 @@ HeadsUpDisplay.prototype = {
     this._positionConsoleWindow = (function HUD_positionWindow() {
       this.positionConsole("window");
     }).bind(this);
 
     let button = this.makeXULNode("toolbarbutton");
     button.setAttribute("type", "menu");
     button.setAttribute("label", this.getStr("webConsolePosition"));
     button.setAttribute("tooltip", this.getStr("webConsolePositionTooltip"));
+    button.className = "devtools-toolbarbutton";
 
     let menuPopup = this.makeXULNode("menupopup");
     button.appendChild(menuPopup);
 
     let itemAbove = this.makeXULNode("menuitem");
     itemAbove.setAttribute("label", this.getStr("webConsolePositionAbove"));
     itemAbove.setAttribute("type", "checkbox");
     itemAbove.setAttribute("autocheck", "false");
@@ -4047,16 +4050,17 @@ HeadsUpDisplay.prototype = {
 
     let name = aDescriptor.name;
     toolbarButton.setAttribute("type", "menu-button");
     toolbarButton.setAttribute("label", this.getStr("btn" + name));
     toolbarButton.setAttribute("tooltip", this.getStr("tip" + name));
     toolbarButton.setAttribute("category", aDescriptor.category);
     toolbarButton.setAttribute("hudId", this.hudId);
     toolbarButton.classList.add("webconsole-filter-button");
+    toolbarButton.classList.add("devtools-toolbarbutton");
 
     let menuPopup = this.makeXULNode("menupopup");
     toolbarButton.appendChild(menuPopup);
 
     let someChecked = false;
     for (let i = 0; i < aDescriptor.severities.length; i++) {
       let severity = aDescriptor.severities[i];
       let menuItem = this.makeXULNode("menuitem");
@@ -4094,16 +4098,17 @@ HeadsUpDisplay.prototype = {
     this.closeButtonOnCommand = (function HUD_closeButton_onCommand() {
       HUDService.animate(this.hudId, ANIMATE_OUT, (function() {
         HUDService.deactivateHUDForContext(this.tab, true);
       }).bind(this));
     }).bind(this);
 
     this.closeButton = this.makeXULNode("toolbarbutton");
     this.closeButton.classList.add("webconsole-close-button");
+    this.closeButton.classList.add("devtools-closebutton");
     this.closeButton.addEventListener("command",
       this.closeButtonOnCommand, false);
     aToolbar.appendChild(this.closeButton);
   },
 
   /**
    * Creates the "Clear Console" button.
    *
@@ -4124,16 +4129,18 @@ HeadsUpDisplay.prototype = {
       if (hud.gcliterm) {
         hud.gcliterm.clearOutput();
       }
     }
 
     let clearButton = this.makeXULNode("toolbarbutton");
     clearButton.setAttribute("label", this.getStr("btnClear"));
     clearButton.classList.add("webconsole-clear-console-button");
+    clearButton.classList.add("clear-console-button");
+    clearButton.classList.add("devtools-toolbarbutton");
     clearButton.addEventListener("command", HUD_clearButton_onCommand, false);
 
     aToolbar.appendChild(clearButton);
   },
 
   /**
    * Destroy the property inspector message node. This performs the necessary
    * cleanup for the tree widget and removes it from the DOM.
@@ -5740,16 +5747,17 @@ JSTermFirefoxMixin.prototype = {
     if (this.existingConsoleNode == undefined) {
       throw new Error("This can't happen");
     }
 
     this.outputNode = this.existingConsoleNode;
 
     this.term = this.xulElementFactory("hbox");
     this.term.setAttribute("class", "jsterm-input-container");
+
     this.term.setAttribute("style", "direction: ltr;");
     this.term.appendChild(inputStack);
   },
 
   get inputValue()
   {
     return this.inputNode.value;
   },
@@ -5893,32 +5901,21 @@ ConsoleUtils = {
                                           aTimeStamp) {
     if (typeof aBody != "string" && aClipboardText == null && aBody.innerText) {
       aClipboardText = aBody.innerText;
     }
 
     // Make the icon container, which is a vertical box. Its purpose is to
     // ensure that the icon stays anchored at the top of the message even for
     // long multi-line messages.
-    let iconContainer = aDocument.createElementNS(XUL_NS, "vbox");
-    iconContainer.classList.add("webconsole-msg-icon-container");
+    let label = aDocument.createElementNS(XUL_NS, "label");
+    label.classList.add("webconsole-msg-icon");
     // Apply the curent group by indenting appropriately.
     let hud = HUDService.getHudReferenceById(aHUDId);
-    iconContainer.style.marginLeft = hud.groupDepth * GROUP_INDENT + "px";
-
-    // Make the icon node. It's sprited and the actual region of the image is
-    // determined by CSS rules.
-    let iconNode = aDocument.createElementNS(XUL_NS, "image");
-    iconNode.classList.add("webconsole-msg-icon");
-    iconContainer.appendChild(iconNode);
-
-    // Make the spacer that positions the icon.
-    let spacer = aDocument.createElementNS(XUL_NS, "spacer");
-    spacer.setAttribute("flex", "1");
-    iconContainer.appendChild(spacer);
+    label.style.marginLeft = hud.groupDepth * GROUP_INDENT + "px";
 
     // Create the message body, which contains the actual text of the message.
     let bodyNode = aDocument.createElementNS(XUL_NS, "description");
     bodyNode.setAttribute("flex", "1");
     bodyNode.classList.add("webconsole-msg-body");
 
     // Store the body text, since it is needed later for the property tree
     // case.
@@ -5933,31 +5930,29 @@ ConsoleUtils = {
 
     if (!aBody.nodeType) {
       aBody = aDocument.createTextNode(aBody.toString());
     }
     if (typeof aBody == "string") {
       aBody = aDocument.createTextNode(aBody);
     }
 
-    bodyNode.appendChild(aBody);
-
-    let repeatContainer = aDocument.createElementNS(XUL_NS, "hbox");
-    repeatContainer.setAttribute("align", "start");
     let repeatNode = aDocument.createElementNS(XUL_NS, "label");
     repeatNode.setAttribute("value", "1");
     repeatNode.classList.add("webconsole-msg-repeat");
-    repeatContainer.appendChild(repeatNode);
+
+    bodyNode.appendChild(repeatNode);
+    bodyNode.appendChild(aBody);
 
     // Create the timestamp.
     let timestampNode = aDocument.createElementNS(XUL_NS, "label");
     timestampNode.classList.add("webconsole-timestamp");
     let timestamp = aTimeStamp || ConsoleUtils.timestamp();
     let timestampString = ConsoleUtils.timestampString(timestamp);
-    timestampNode.setAttribute("value", timestampString);
+    timestampNode.setAttribute("value", "[" + timestampString + "]");
 
     // Create the source location (e.g. www.example.com:6) that sits on the
     // right side of the message, if applicable.
     let locationNode;
     if (aSourceURL) {
       locationNode = this.createLocationNode(aDocument, aSourceURL,
                                              aSourceLine);
     }
@@ -5966,17 +5961,17 @@ ConsoleUtils = {
     let node = aDocument.createElementNS(XUL_NS, "richlistitem");
     node.clipboardText = aClipboardText;
     node.classList.add("hud-msg-node");
 
     node.timestamp = timestamp;
     ConsoleUtils.setMessageType(node, aCategory, aSeverity);
 
     node.appendChild(timestampNode);
-    node.appendChild(iconContainer);
+    node.appendChild(label);
     // Display the object tree after the message node.
     if (aLevel == "dir") {
       // Make the body container, which is a vertical box, for grouping the text
       // and tree widgets.
       let bodyContainer = aDocument.createElement("vbox");
       bodyContainer.setAttribute("flex", "1");
       bodyContainer.appendChild(bodyNode);
       // Create the tree.
@@ -6003,17 +5998,16 @@ ConsoleUtils = {
       // Create the treeView object.
       let treeView = node.propertyTreeView = new PropertyTreeView();
       treeView.data = body;
       tree.setAttribute("rows", treeView.rowCount);
     }
     else {
       node.appendChild(bodyNode);
     }
-    node.appendChild(repeatContainer);
     if (locationNode) {
       node.appendChild(locationNode);
     }
 
     node.setAttribute("id", "console-msg-" + HUDService.sequenceId());
 
     return node;
   },
@@ -6138,19 +6132,17 @@ ConsoleUtils = {
    *
    * @param nsIDOMNode aOriginal
    *        The Original Node. The one being merged into.
    * @param nsIDOMNode aFiltered
    *        The node being filtered out because it is repeated.
    */
   mergeFilteredMessageNode:
   function ConsoleUtils_mergeFilteredMessageNode(aOriginal, aFiltered) {
-    // childNodes[3].firstChild is the node containing the number of repetitions
-    // of a node.
-    let repeatNode = aOriginal.childNodes[3].firstChild;
+    let repeatNode = aOriginal.querySelector(".webconsole-msg-repeat");
     if (!repeatNode) {
       return aOriginal; // no repeat node, return early.
     }
 
     let occurrences = parseInt(repeatNode.getAttribute("value")) + 1;
     repeatNode.setAttribute("value", occurrences);
   },
 
@@ -7051,28 +7043,25 @@ GcliTerm.prototype = {
     }
 
     // See https://github.com/mozilla/domtemplate/blob/master/README.md
     // for docs on the template() function
     let element = this.document.createRange().createContextualFragment(
       '<richlistitem xmlns="' + XUL_NS + '" _clipboardText="${clipboardText}"' +
       '    _timestamp="${timestamp}" _id="${id}" class="hud-msg-node">' +
       '  <label class="webconsole-timestamp" _value="${timestampString}"/>' +
-      '  <vbox class="webconsole-msg-icon-container" _style="${iconContainerStyle}">' +
-      '    <image class="webconsole-msg-icon"/>' +
-      '    <spacer flex="1"/>' +
-      '  </vbox>' +
+      '  <label class="webconsole-msg-icon" _style="${labelStyle}"/>' +
       '  <hbox flex="1" class="gcliterm-msg-body">${output}</hbox>' +
       '  <hbox align="start"><label value="1" class="webconsole-msg-repeat"/></hbox>' +
       '</richlistitem>').firstChild;
 
     let hud = HUDService.getHudReferenceById(this.hudId);
     let timestamp = ConsoleUtils.timestamp();
     template(element, {
-      iconContainerStyle: "margin-left=" + (hud.groupDepth * GROUP_INDENT) + "px",
+      labelStyle: "margin-left=" + (hud.groupDepth * GROUP_INDENT) + "px",
       output: output,
       timestamp: timestamp,
       timestampString: ConsoleUtils.timestampString(timestamp),
       clipboardText: output.innerText,
       id: "console-msg-" + HUDService.sequenceId()
     });
 
     ConsoleUtils.setMessageType(element, CATEGORY_OUTPUT, SEVERITY_LOG);
diff --git a/browser/themes/gnomestripe/devtools/webconsole.css b/browser/themes/gnomestripe/devtools/webconsole.css
--- a/browser/themes/gnomestripe/devtools/webconsole.css
+++ b/browser/themes/gnomestripe/devtools/webconsole.css
@@ -18,33 +18,40 @@
  * Portions created by the Initial Developer are Copyright (C) 2010
  * the Initial Developer. All Rights Reserved.
  *
  * Contributor(s):
  *   David Dahl <ddahl@mozilla.com>
  *   Patrick Walton <pcwalton@mozilla.com>
  *   Mihai Șucan <mihai.sucan@gmail.com>
  *   Rob Campbell <rcampbell@mozilla.com>
+ *   Paul Rouget <paul@mozilla.com>
  *
  * Alternatively, the contents of this file may be used under the terms of
  * either the GNU General Public License Version 2 or later (the "GPL"), or
  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  * in which case the provisions of the GPL or the LGPL are applicable instead
  * of those above. If you wish to allow use of your version of this file only
  * under the terms of either the GPL or the LGPL, and not to allow others to
  * use your version of this file under the terms of the MPL, indicate your
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
+%filter substitution
+%define NET_COLOR #667380
+%define CSS_COLOR #00b6f0
+%define JS_COLOR #ff0066
+%define LOG_COLOR #ffffff
+
 .hud-box {
-  border-bottom: 1px solid #aaa;
+  border-bottom: 1px solid black;
   text-shadow: none;
 }
 
 .hud-box.animated {
   -moz-transition: height 100ms;
 }
 
 .hud-splitter {
@@ -59,203 +66,218 @@
 .hud-console-wrapper {
   width: 100%;
   overflow: auto;
 }
 
 /* General output styles */
 
 .webconsole-timestamp {
-  color: GrayText;
-  margin-top: 0;
-  margin-bottom: 0;
-  font: 12px "DejaVu Sans Mono", monospace;
+  color: #667380; /*FIXME:SHORLANDER COLOR*/
+  margin: 0;
+  background-color: rgba(255, 255, 255, 0.04);
+  padding: 2px 5px;
+  font: 12px monospace;
+  border-right: 1px solid #566370;
+}
+
+.webconsole-timestamp:before {
+  content: "[";
+}
+
+.webconsole-timestamp:after {
+  content: "]";
 }
 
 .hud-msg-node {
   list-style-image: url(chrome://browser/skin/devtools/webconsole.png);
   -moz-image-region: rect(0, 1px, 0, 0);
 }
 
-.webconsole-msg-icon {
-  margin: 3px 4px;
-  width: 8px;
-  height: 8px;
-}
-
-.hud-clickable {
+.hud-clickable:hover {
   cursor: pointer;
   text-decoration: underline;
 }
 
 .webconsole-msg-body {
-  margin-top: 0;
-  margin-bottom: 3px;
-  -moz-margin-start: 3px;
-  -moz-margin-end: 6px;
+  -moz-margin-end: 3px;
+  -moz-margin-start: 0;
+  padding-top: 2px;
   white-space: pre-wrap;
-  font: 12px "DejaVu Sans Mono", monospace;
+  font: 12px monospace;
 }
 
 .webconsole-msg-body-piece {
   margin: 0;
 }
 
 .webconsole-msg-url {
-  margin: 0 6px;
+  margin: 0 3px;
 }
 
 /* Repeated messages */
 .webconsole-msg-repeat {
-  margin: 2px 0;
-  padding-left: 4px;
-  padding-right: 4px;
-  color: white;
-  background-color: red;
-  border-radius: 40px;
+  margin-top: 0;
+  -moz-margin-end: 6px;
+  -moz-margin-start: 0;
+  padding: 0 4px;
+  color: #030e1a; /*FIXME:SHORLANDER COLOR*/
+  background-color: #6B8299; /*FIXME:SHORLANDER COLOR*/
+  border-radius: 1px;
   font: message-box;
   font-size: 10px;
   font-weight: 600;
+  vertical-align: middle;
 }
 
 /* TODO move this and other functional rules to content - bug 635359 */
 .webconsole-msg-repeat[value="1"] {
   display: none;
 }
 
 .webconsole-location {
   margin-top: 0;
   margin-bottom: 0;
   -moz-margin-start: 0;
-  -moz-margin-end: 6px;
+  -moz-margin-end: 3px;
   width: 10em;
   text-align: end;
 }
 
-.hud-msg-node[selected="true"] > .webconsole-timestamp,
-.hud-msg-node[selected="true"] > .webconsole-location {
+/* FIXME: doesn't work if node is filtered */
+.hud-msg-node:not([selected="true"]):nth-child(odd) {
+  background-color: #151F2A;
+}
+
+.hud-msg-node[selected="true"],
+.hud-output-node:focus > .hud-msg-node[selected="true"] {
+  background-color: inherit;
   color: inherit;
 }
 
+.jsterm-input-container {
+  background-color: #151F2A;
+}
+
+.jsterm-input-node {
+  color: white;
+}
+
+.jsterm-complete-node {
+  color: #667380;
+  background-color: transparent;
+}
+
 .jsterm-input-node,
 .jsterm-complete-node {
   font: 12px "DejaVu Sans Mono", monospace;
 }
 
 .hud-output-node {
   -moz-appearance: none;
-  border-bottom: 1px solid ThreeDShadow;
-  border-top: 1px solid ThreeDShadow;
   margin: 0;
+  background-color: #030e1a; /*FIXME:SHORLANDER COLOR*/
+  border-bottom: 1px solid #566370;
 }
 
 .hud-filtered-by-type,
 .hud-filtered-by-string {
   display: none;
 }
 
 .webconsole-clear-console-button > .toolbarbutton-icon {
   display: none;
 }
 
-.webconsole-filter-button {
-  margin: 0 3px;
-}
-
 .webconsole-filter-button > .toolbarbutton-menubutton-button,
 .webconsole-filter-button:not([type="menu-button"]) {
   -moz-box-orient: horizontal;
-  list-style-image: url("chrome://browser/skin/devtools/webconsole.png");
+}
+
+.webconsole-filter-button {
+  min-width: 32px;
+  -moz-box-align: center;
+}
+
+.webconsole-filter-button > .toolbarbutton-icon {
+  display: none;
+}
+
+.webconsole-filter-button:before {
+  content: "";
+  display: inline-block;
+  box-shadow: 0 0 1px 1px solid black;
+  height: 8px;
+  width: 8px;
+  border-radius: 50%;
+  margin-left: 5px;
+}
+
+.webconsole-msg-icon {
+  width: 26px;
+  margin: 0;
+  text-align: center;
+  padding-top: 3px;
+}
+
+.webconsole-msg-error > .webconsole-msg-icon:before {
+  content: "✕";
+  color: red;
+}
+
+.webconsole-msg-warn > .webconsole-msg-icon:before {
+  content: "⚠";
+  color: white;
 }
 
 /* Network styles */
-.webconsole-filter-button[category="net"] {
-  -moz-image-region: rect(0, 8px, 8px, 0);
+.webconsole-filter-button[category="net"]:before {
+  background-color: @NET_COLOR@;
 }
 
-.webconsole-msg-network > .webconsole-msg-icon-container {
-  -moz-border-start: solid #000 6px;
-}
-
-.webconsole-msg-network.webconsole-msg-error {
-  -moz-image-region: rect(0, 16px, 8px, 8px);
+.webconsole-msg-network > .webconsole-msg-body {
+  color: @NET_COLOR@;
 }
 
 /* CSS styles */
-.webconsole-filter-button[category="css"] {
-  -moz-image-region: rect(8px, 8px, 16px, 0);
+.webconsole-filter-button[category="css"]:before {
+  background-color: @CSS_COLOR@;
 }
 
-.webconsole-msg-cssparser > .webconsole-msg-icon-container {
-  -moz-border-start: solid #00b6f0 6px;
-}
-
-.webconsole-msg-cssparser.webconsole-msg-error {
-  -moz-image-region: rect(8px, 16px, 16px, 8px);
-}
-
-.webconsole-msg-cssparser.webconsole-msg-warn {
-  -moz-image-region: rect(8px, 24px, 16px, 16px);
+.webconsole-msg-cssparser {
+  color: @CSS_COLOR@;
 }
 
 /* JS styles */
-.webconsole-filter-button[category="js"] {
-  -moz-image-region: rect(16px, 8px, 24px, 0);
+.webconsole-filter-button[category="js"]:before {
+  background-color: @JS_COLOR@;
 }
 
-.webconsole-msg-exception > .webconsole-msg-icon-container {
-  -moz-border-start: solid #fb9500 6px;
-}
-
-.webconsole-msg-exception.webconsole-msg-error {
-  -moz-image-region: rect(16px, 16px, 24px, 8px);
-}
-
-.webconsole-msg-exception.webconsole-msg-warn {
-  -moz-image-region: rect(16px, 24px, 24px, 16px);
+.webconsole-msg-exception {
+  color: @JS_COLOR@;
 }
 
 /* Web Developer styles */
-.webconsole-filter-button[category="logging"] {
-  -moz-image-region: rect(24px, 8px, 32px, 0);
+.webconsole-filter-button[category="logging"]:before {
+  background-color: @LOG_COLOR@;
 }
 
-.webconsole-msg-console > .webconsole-msg-icon-container {
-  -moz-border-start: solid #cbcbcb 6px;
-}
-
-.webconsole-msg-console.webconsole-msg-error,
-.webconsole-msg-output.webconsole-msg-error {
-  -moz-image-region: rect(24px, 16px, 32px, 8px);
-}
-
-.webconsole-msg-console.webconsole-msg-warn {
-  -moz-image-region: rect(24px, 24px, 32px, 16px);
-}
-
-.webconsole-msg-console.webconsole-msg-info {
-  -moz-image-region: rect(24px, 32px, 32px, 24px);
+.webconsole-msg-input,
+.webconsole-msg-log,
+.webconsole-msg-console {
+  color: @LOG_COLOR@;
 }
 
 /* Input and output styles */
-.webconsole-msg-input > .webconsole-msg-icon-container,
-.webconsole-msg-output > .webconsole-msg-icon-container {
-  border-left: solid #808080 6px;
+.webconsole-msg-input > .webconsole-msg-icon:before {
+  content: ">";
 }
 
-.webconsole-msg-input {
-  -moz-image-region: rect(24px, 40px, 32px, 32px);
-}
-
-.webconsole-msg-output {
-  -moz-image-region: rect(24px, 48px, 32px, 40px);
-}
-
-.webconsole-close-button {
-  list-style-image: url("moz-icon://stock/gtk-close?size=menu");
+.webconsole-msg-output > .webconsole-msg-icon:before {
+  content: "↳";
 }
 
 /* JSTerm Styles */
 
 .jsterm-wrapper-node {
   font-family: monospace;
   font-size: 1em;
   background-color: #000;
@@ -287,29 +309,25 @@
 .jsterm-input-node,
 .jsterm-complete-node {
   border: none;
   padding: 0 0 0 16px;
   -moz-appearance: none;
 }
 
 .jsterm-input-node {
-  width: 98%;
+  width: 98%; /* FIXME: what is that? */
   background: url("chrome://browser/skin/devtools/commandline.png") 4px 3px no-repeat;
 }
 
 :-moz-any(.jsterm-input-node,
           .jsterm-complete-node) > .textbox-input-box > .textbox-textarea {
   overflow-x: hidden;
 }
 
-.jsterm-complete-node > .textbox-input-box > .textbox-textarea {
-  color: GrayText;
-}
-
 .jsterm-output-line {
   font-size: 1em;
 }
 
 .web-console-panel {
   -moz-appearance: none;
   background-color: white;
 }
diff --git a/browser/themes/gnomestripe/jar.mn b/browser/themes/gnomestripe/jar.mn
--- a/browser/themes/gnomestripe/jar.mn
+++ b/browser/themes/gnomestripe/jar.mn
@@ -85,17 +85,17 @@ browser.jar:
   skin/classic/browser/tabview/stack-expander.png     (tabview/stack-expander.png)
   skin/classic/browser/tabview/tabview.png            (tabview/tabview.png)
   skin/classic/browser/tabview/tabview.css            (tabview/tabview.css)
   skin/classic/browser/devtools/common.css            (devtools/common.css)
   skin/classic/browser/devtools/arrows.png            (devtools/arrows.png)
   skin/classic/browser/devtools/commandline.png       (devtools/commandline.png)
   skin/classic/browser/devtools/goto-mdn.png          (devtools/goto-mdn.png)
   skin/classic/browser/devtools/csshtmltree.css       (devtools/csshtmltree.css)
-  skin/classic/browser/devtools/webconsole.css                  (devtools/webconsole.css)
+* skin/classic/browser/devtools/webconsole.css                  (devtools/webconsole.css)
   skin/classic/browser/devtools/webconsole_networkpanel.css     (devtools/webconsole_networkpanel.css)
   skin/classic/browser/devtools/webconsole.png                  (devtools/webconsole.png)
   skin/classic/browser/devtools/gcli.css              (devtools/gcli.css)
   skin/classic/browser/devtools/orion.css             (devtools/orion.css)
   skin/classic/browser/devtools/orion-container.css   (devtools/orion-container.css)
   skin/classic/browser/devtools/orion-task.png        (devtools/orion-task.png)
   skin/classic/browser/devtools/orion-breakpoint.png  (devtools/orion-breakpoint.png)
   skin/classic/browser/devtools/breadcrumbs/ltr-end-pressed.png              (devtools/breadcrumbs/ltr-end-pressed.png)
diff --git a/browser/themes/pinstripe/devtools/webconsole.css b/browser/themes/pinstripe/devtools/webconsole.css
--- a/browser/themes/pinstripe/devtools/webconsole.css
+++ b/browser/themes/pinstripe/devtools/webconsole.css
@@ -17,16 +17,17 @@
  *   Mozilla Corporation
  * Portions created by the Initial Developer are Copyright (C) 2010
  * the Initial Developer. All Rights Reserved.
  *
  * Contributor(s):
  *   David Dahl <ddahl@mozilla.com>
  *   Patrick Walton <pcwalton@mozilla.com>
  *   Rob Campbell <rcampbell@mozilla.com>
+ *   Paul Rouget <paul@mozilla.com>
  *
  * Alternatively, the contents of this file may be used under the terms of
  * either the GNU General Public License Version 2 or later (the "GPL"), or
  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  * in which case the provisions of the GPL or the LGPL are applicable instead
  * of those above. If you wish to allow use of your version of this file only
  * under the terms of either the GPL or the LGPL, and not to allow others to
  * use your version of this file under the terms of the MPL, indicate your
@@ -34,297 +35,252 @@
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 %include ../shared.inc
 
+%filter substitution
+%define NET_COLOR #667380
+%define CSS_COLOR #00b6f0
+%define JS_COLOR #ff0066
+%define LOG_COLOR #ffffff
+
 .hud-box {
-  border-bottom: 1px solid #aaa;
+  border-bottom: 1px solid black;
   text-shadow: none;
 }
 
 .hud-box.animated {
   -moz-transition: height 100ms;
 }
 
 .hud-splitter {
   border-bottom: solid #a5a5a5 1px;
   background: url("chrome://global/skin/splitter/dimple.png") no-repeat center,
-    -moz-linear-gradient(top, #fcfcfc, #dfdfdf);
+  -moz-linear-gradient(top, #fcfcfc, #dfdfdf);
 }
 
 .hud-outer-wrapper {
   width: 100%;
   height: 100%;
 }
 
 .hud-console-wrapper {
   width: 100%;
   overflow: auto;
 }
 
 /* General output styles */
 
 .webconsole-timestamp {
-  color: GrayText;
-  margin-top: 0;
-  margin-bottom: 0;
-  font: 11px Menlo, Monaco, monospace;
+  color: #667380; /*FIXME:SHORLANDER COLOR*/
+  margin: 0;
+  background-color: rgba(255, 255, 255, 0.04);
+  padding: 2px 5px;
+  font: 12px monospace;
+  border-right: 1px solid #566370;
+}
+
+.webconsole-timestamp:before {
+  content: "[";
+}
+
+.webconsole-timestamp:after {
+  content: "]";
 }
 
 .hud-msg-node {
   list-style-image: url(chrome://browser/skin/devtools/webconsole.png);
   -moz-image-region: rect(0, 1px, 0, 0);
 }
 
-.webconsole-msg-icon {
-  margin: 3px 4px;
-  width: 8px;
-  height: 8px;
-}
-
-.hud-clickable {
+.hud-clickable:hover {
   cursor: pointer;
   text-decoration: underline;
 }
 
 .webconsole-msg-body {
-  margin-top: 0;
-  margin-bottom: 3px;
-  -moz-margin-start: 3px;
-  -moz-margin-end: 6px;
+  -moz-margin-end: 3px;
+  -moz-margin-start: 0;
+  padding-top: 2px;
   white-space: pre-wrap;
-  font: 11px Menlo, Monaco, monospace;
+  font: 12px monospace;
 }
 
 .webconsole-msg-body-piece {
   margin: 0;
 }
 
 .webconsole-msg-url {
-  margin: 0 6px;
+  margin: 0 3px;
 }
 
 /* Repeated messages */
 .webconsole-msg-repeat {
-  margin: 2px 0;
-  padding-left: 4px;
-  padding-right: 4px;
-  color: white;
-  background-color: red;
-  border-radius: 40px;
+  margin-top: 0;
+  -moz-margin-end: 6px;
+  -moz-margin-start: 0;
+  padding: 0 4px;
+  color: #030e1a; /*FIXME:SHORLANDER COLOR*/
+  background-color: #6B8299; /*FIXME:SHORLANDER COLOR*/
+  border-radius: 1px;
   font: message-box;
   font-size: 10px;
   font-weight: 600;
+  vertical-align: middle;
 }
 
 /* TODO move this and other functional rules to content - bug 635359 */
 .webconsole-msg-repeat[value="1"] {
   display: none;
 }
 
 .webconsole-location {
   margin-top: 0;
   margin-bottom: 0;
   -moz-margin-start: 0;
-  -moz-margin-end: 6px;
+  -moz-margin-end: 3px;
   width: 10em;
   text-align: end;
 }
 
-.hud-msg-node[selected="true"] > .webconsole-timestamp,
-.hud-msg-node[selected="true"] > .webconsole-location {
+/* FIXME: doesn't work if node is filtered */
+.hud-msg-node:not([selected="true"]):nth-child(odd) {
+  background-color: #151F2A;
+}
+
+.hud-msg-node[selected="true"],
+.hud-output-node:focus > .hud-msg-node[selected="true"] {
+  background-color: inherit;
   color: inherit;
 }
 
+.jsterm-input-container {
+  background-color: #151F2A;
+}
+
+.jsterm-input-node {
+  color: white;
+}
+
+.jsterm-complete-node {
+  color: #667380;
+  background-color: transparent;
+}
+
 .jsterm-input-node,
 .jsterm-complete-node {
-  font: 11px Menlo, Monaco, monospace;
+  font: 12px "DejaVu Sans Mono", monospace;
 }
 
 .hud-output-node {
   -moz-appearance: none;
-  border-bottom: 1px solid ThreeDShadow;
-  border-top: 1px solid ThreeDShadow;
   margin: 0;
+  background-color: #030e1a; /*FIXME:SHORLANDER COLOR*/
+  border-bottom: 1px solid #566370;
 }
 
 .hud-filtered-by-type,
 .hud-filtered-by-string {
   display: none;
 }
 
-.webconsole-filter-button,
-.webconsole-clear-console-button {
-  -moz-appearance: none;
-  border: @roundButtonBorder@;
-  background: @roundButtonBackground@;
-  box-shadow: @roundButtonShadow@;
-  color: buttontext;
-  margin: 1px 0;
-  padding: 0;
+.webconsole-clear-console-button > .toolbarbutton-icon {
+  display: none;
+}
+
+.webconsole-filter-button > .toolbarbutton-menubutton-button,
+.webconsole-filter-button:not([type="menu-button"]) {
+  -moz-box-orient: horizontal;
 }
 
 .webconsole-filter-button {
-  border-radius: 10000px;
-  -moz-margin-start: 6px;
-  -moz-box-orient: horizontal;
+  min-width: 32px;
+  -moz-box-align: center;
 }
 
-.webconsole-clear-console-button {
-  border-radius: 3px;
-  -moz-margin-end: 6px;
-  -moz-margin-start: 4px;
-  padding: 1px 6px;
+.webconsole-filter-button > .toolbarbutton-icon {
+  display: none;
 }
 
-.webconsole-filter-button[checked="true"] {
-  box-shadow: @roundButtonPressedShadow@;
-  background: #d0d0d0;
+.webconsole-filter-button:before {
+  content: "";
+  display: inline-block;
+  box-shadow: 0 0 1px 1px solid black;
+  height: 8px;
+  width: 8px;
+  border-radius: 50%;
+  margin-left: 5px;
 }
 
-.webconsole-filter-button > .toolbarbutton-menubutton-button {
-  -moz-appearance: none;
+.webconsole-msg-icon {
+  width: 26px;
   margin: 0;
-  padding: 1px 0;
-  list-style-image: url(chrome://browser/skin/devtools/webconsole.png);
-  -moz-box-orient: horizontal;
+  text-align: center;
+  padding-top: 3px;
 }
 
-.webconsole-filter-button:hover:active,
-.webconsole-clear-console-button:hover:active {
-  text-shadow: @loweredShadow@;
-  box-shadow: @roundButtonPressedShadow@;
-  background: @roundButtonPressedBackground@;
+.webconsole-msg-error > .webconsole-msg-icon:before {
+  content: "✕";
+  color: red;
 }
 
-.webconsole-clear-console-button > .toolbarbutton-text {
-  margin: 0;
-}
-
-.webconsole-filter-button > .toolbarbutton-menubutton-button > .toolbarbutton-text {
-  margin: 0 3px;
-}
-
-.webconsole-filter-button > .toolbarbutton-menubutton-button > .toolbarbutton-icon {
-  -moz-margin-start: 3px;
-}
-
-.webconsole-filter-button > .toolbarbutton-menubutton-dropmarker {
-  padding: 6px 3px 2px;
-  -moz-border-start: dotted #aaaaaa 1px;
-}
-
-.webconsole-new-group {
-  margin-top: 6px;
+.webconsole-msg-warn > .webconsole-msg-icon:before {
+  content: "⚠";
+  color: white;
 }
 
 /* Network styles */
-.webconsole-filter-button[category="net"] {
-  -moz-image-region: rect(0, 8px, 8px, 0);
+.webconsole-filter-button[category="net"]:before {
+  background-color: @NET_COLOR@;
 }
 
-.webconsole-msg-network > .webconsole-msg-icon-container {
-  -moz-border-start: solid #000 6px;
-}
-
-.webconsole-msg-network.webconsole-msg-error {
-  -moz-image-region: rect(0, 16px, 8px, 8px);
+.webconsole-msg-network > .webconsole-msg-body {
+  color: @NET_COLOR@;
 }
 
 /* CSS styles */
-.webconsole-filter-button[category="css"] {
-  -moz-image-region: rect(8px, 8px, 16px, 0);
+.webconsole-filter-button[category="css"]:before {
+  background-color: @CSS_COLOR@;
 }
 
-.webconsole-msg-cssparser > .webconsole-msg-icon-container {
-  -moz-border-start: solid #00b6f0 6px;
-}
-
-.webconsole-msg-cssparser.webconsole-msg-error {
-  -moz-image-region: rect(8px, 16px, 16px, 8px);
-}
-
-.webconsole-msg-cssparser.webconsole-msg-warn {
-  -moz-image-region: rect(8px, 24px, 16px, 16px);
+.webconsole-msg-cssparser {
+  color: @CSS_COLOR@;
 }
 
 /* JS styles */
-.webconsole-filter-button[category="js"] {
-  -moz-image-region: rect(16px, 8px, 24px, 0);
+.webconsole-filter-button[category="js"]:before {
+  background-color: @JS_COLOR@;
 }
 
-.webconsole-msg-exception > .webconsole-msg-icon-container {
-  -moz-border-start: solid #fb9500 6px;
-}
-
-.webconsole-msg-exception.webconsole-msg-error {
-  -moz-image-region: rect(16px, 16px, 24px, 8px);
-}
-
-.webconsole-msg-exception.webconsole-msg-warn {
-  -moz-image-region: rect(16px, 24px, 24px, 16px);
+.webconsole-msg-exception {
+  color: @JS_COLOR@;
 }
 
 /* Web Developer styles */
-.webconsole-filter-button[category="logging"] {
-  -moz-image-region: rect(24px, 8px, 32px, 0);
+.webconsole-filter-button[category="logging"]:before {
+  background-color: @LOG_COLOR@;
 }
 
-.webconsole-msg-console > .webconsole-msg-icon-container {
-  -moz-border-start: solid #cbcbcb 6px;
-}
-
-.webconsole-msg-console.webconsole-msg-error,
-.webconsole-msg-output.webconsole-msg-error {
-  -moz-image-region: rect(24px, 16px, 32px, 8px);
-}
-
-.webconsole-msg-console.webconsole-msg-warn {
-  -moz-image-region: rect(24px, 24px, 32px, 16px);
-}
-
-.webconsole-msg-console.webconsole-msg-info {
-  -moz-image-region: rect(24px, 32px, 32px, 24px);
+.webconsole-msg-input,
+.webconsole-msg-log,
+.webconsole-msg-console {
+  color: @LOG_COLOR@;
 }
 
 /* Input and output styles */
-.webconsole-msg-input > .webconsole-msg-icon-container,
-.webconsole-msg-output > .webconsole-msg-icon-container {
-  border-left: solid #808080 6px;
+.webconsole-msg-input > .webconsole-msg-icon:before {
+  content: ">";
 }
 
-.webconsole-msg-input {
-  -moz-image-region: rect(24px, 40px, 32px, 32px);
-}
-
-.webconsole-msg-output {
-  -moz-image-region: rect(24px, 48px, 32px, 40px);
-}
-
-.webconsole-close-button {
-  list-style-image: url("chrome://global/skin/icons/close.png");
-  margin-top: 0;
-  margin-bottom: 0;
-  -moz-margin-start: 3px;
-  -moz-margin-end: -14px;
-  min-width: 0;
-  -moz-appearance: none;
-  -moz-image-region: rect(0, 16px, 16px, 0);
-}
-
-.webconsole-close-button:hover {
-  -moz-image-region: rect(0, 32px, 16px, 16px);
-}
-
-.webconsole-close-button:hover:active {
-  -moz-image-region: rect(0, 48px, 16px, 32px);
+.webconsole-msg-output > .webconsole-msg-icon:before {
+  content: "↳";
 }
 
 /* JSTerm Styles */
 
 .jsterm-wrapper-node {
   font-family: monospace;
   font-size: 1em;
   background-color: #000;
@@ -356,44 +312,28 @@
 .jsterm-input-node,
 .jsterm-complete-node {
   border: none;
   padding: 0 0 0 16px;
   -moz-appearance: none;
 }
 
 .jsterm-input-node {
-  background: url("chrome://browser/skin/devtools/commandline.png") 4px 2px no-repeat;
+  background: url("chrome://browser/skin/devtools/commandline.png") 4px 3px no-repeat;
 }
 
 :-moz-any(.jsterm-input-node,
           .jsterm-complete-node) > .textbox-input-box > .textbox-textarea {
   overflow-x: hidden;
 }
 
-.jsterm-complete-node > .textbox-input-box > .textbox-textarea {
-  color: GrayText;
-}
-
 .jsterm-output-line {
   font-size: 1em;
 }
 
-.hud-console-filter-toolbar {
-  background: @scopeBarBackground@;
-  border-bottom: @scopeBarSeparatorBorder@;
-  padding: 0px 1px;
-  -moz-appearance: none;
-  -moz-box-align: center;
-}
-
-.hud-console-filter-toolbar:-moz-lwtheme {
-  border-top: @scopeBarSeparatorBorder@;
-}
-
 .web-console-panel {
   -moz-appearance: none;
   background-color: white;
 }
 
 .web-console-panel > .hud-box {
   height: 100%;
   width: 100%;

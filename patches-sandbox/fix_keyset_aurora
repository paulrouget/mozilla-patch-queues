# HG changeset patch
# Parent 0f8ea3826bf79f3b6c09b4da14abdd76200004ff
Bug 747603 - Firefox:Inspector cannot start up with DOMi

diff --git a/browser/devtools/highlighter/inspector.jsm b/browser/devtools/highlighter/inspector.jsm
--- a/browser/devtools/highlighter/inspector.jsm
+++ b/browser/devtools/highlighter/inspector.jsm
@@ -288,59 +288,61 @@ InspectorUI.prototype = {
 
   /**
    * Add a tooltip to the Inspect and Markup buttons.
    * The tooltips include the related keyboard shortcut.
    */
   buildButtonsTooltip: function IUI_buildButtonsTooltip()
   {
     let keysbundle = Services.strings.createBundle("chrome://global-platform/locale/platformKeys.properties");
+    let separator = keysbundle.GetStringFromName("MODIFIER_SEPARATOR");
 
     // Inspect Button - the shortcut string is built from the <key> element
 
+    let button, tooltip;
+
     let key = this.chromeDoc.getElementById("key_inspect");
 
-    let modifiersAttr = key.getAttribute("modifiers");
+    if (key) {
+      let modifiersAttr = key.getAttribute("modifiers");
 
-    let combo = [];
+      let combo = [];
 
-    if (modifiersAttr.match("accel"))
+      if (modifiersAttr.match("accel"))
 #ifdef XP_MACOSX
-      combo.push(keysbundle.GetStringFromName("VK_META"));
+        combo.push(keysbundle.GetStringFromName("VK_META"));
 #else
-      combo.push(keysbundle.GetStringFromName("VK_CONTROL"));
+        combo.push(keysbundle.GetStringFromName("VK_CONTROL"));
 #endif
-    if (modifiersAttr.match("shift"))
-      combo.push(keysbundle.GetStringFromName("VK_SHIFT"));
-    if (modifiersAttr.match("alt"))
-      combo.push(keysbundle.GetStringFromName("VK_ALT"));
-    if (modifiersAttr.match("ctrl"))
-      combo.push(keysbundle.GetStringFromName("VK_CONTROL"));
-    if (modifiersAttr.match("meta"))
-      combo.push(keysbundle.GetStringFromName("VK_META"));
+      if (modifiersAttr.match("shift"))
+        combo.push(keysbundle.GetStringFromName("VK_SHIFT"));
+      if (modifiersAttr.match("alt"))
+        combo.push(keysbundle.GetStringFromName("VK_ALT"));
+      if (modifiersAttr.match("ctrl"))
+        combo.push(keysbundle.GetStringFromName("VK_CONTROL"));
+      if (modifiersAttr.match("meta"))
+        combo.push(keysbundle.GetStringFromName("VK_META"));
 
-    combo.push(key.getAttribute("key"));
+      combo.push(key.getAttribute("key"));
 
-    let separator = keysbundle.GetStringFromName("MODIFIER_SEPARATOR");
-
-    let tooltip = this.strings.formatStringFromName("inspectButton.tooltiptext",
-      [combo.join(separator)], 1);
-    let button = this.chromeDoc.getElementById("inspector-inspect-toolbutton");
-    button.setAttribute("tooltiptext", tooltip);
+      tooltip = this.strings.formatStringFromName("inspectButton.tooltiptext",
+        [combo.join(separator)], 1);
+      button = this.chromeDoc.getElementById("inspector-inspect-toolbutton");
+      button.setAttribute("tooltiptext", tooltip);
+    }
 
     // Markup Button - the shortcut string is built from the accesskey attribute
 
     button = this.chromeDoc.getElementById("inspector-treepanel-toolbutton");
 #ifdef XP_MACOSX
     // On Mac, no accesskey
     tooltip = this.strings.GetStringFromName("markupButton.tooltip");
 #else
     let altString = keysbundle.GetStringFromName("VK_ALT");
     let accesskey = button.getAttribute("accesskey");
-    let separator = keysbundle.GetStringFromName("MODIFIER_SEPARATOR");
     let shortcut = altString + separator + accesskey;
     tooltip = this.strings.formatStringFromName("markupButton.tooltipWithAccesskey",
       [shortcut], 1);
 #endif
     button.setAttribute("tooltiptext", tooltip);
 
   },
 

# HG changeset patch
# Parent bf21241ec959c64aa0c12c94e43e7f24de06f215
Bug 752473 - [Responsive Mode] we need a decent list of presets

diff --git a/browser/devtools/responsivedesign/responsivedesign.jsm b/browser/devtools/responsivedesign/responsivedesign.jsm
--- a/browser/devtools/responsivedesign/responsivedesign.jsm
+++ b/browser/devtools/responsivedesign/responsivedesign.jsm
@@ -28,31 +28,38 @@ let ResponsiveUIManager = {
     if (aTab.responsiveUI) {
       aTab.responsiveUI.close();
     } else {
       aTab.responsiveUI = new ResponsiveUI(aWindow, aTab);
     }
   },
 }
 
+// These are presets for the most common exposed device-width (as in
+// <meta name="viewport" content="width=device-width"> ) on mobile
+// browsers.
+//
+// The notion of "width" and "height" is not very accurate here because
+// we are actually refering to the width in landscape and portrait mode.
+//
+// But since we also expose computer sizes, and to keep this understandable,
+// we will refer to the width in landscape mode as "height".
+
 let presets =  [
   // Phones
-  {width: 320, height: 480},    // iPhone, B2G, with <meta viewport>
-  {width: 360, height: 640},    // Android 4, phones, with <meta viewport>
+  {category: "phone", width: 320, height: 480, l10n: "responsiveUI.size.phone320"}, // iPhone, Android, B2G
+  {category: "phone", width: 360, height: 640, l10n: "responsiveUI.size.phone360"}, // Android
 
   // Tablets
-  {width: 768, height: 1024},   // iPad, with <meta viewport>
-  {width: 800, height: 1280},   // Android 4, Tablet, with <meta viewport>
-
-  // Default width for mobile browsers, no <meta viewport>
-  {width: 980, height: 1280},
+  {category: "tablet", width: 1024, height:  768, l10n: "responsiveUI.size.tablet1024"}, // iPad
+  {category: "tablet", width: 1280, height: 800, l10n: "responsiveUI.size.tablet1280"}, // Android
 
   // Computer
-  {width: 1280, height: 600},
-  {width: 1920, height: 900},
+  {category: "computer", width: 1024, height: 600},
+  {category: "computer", width: 1280, height: 700},
 ];
 
 function ResponsiveUI(aWindow, aTab)
 {
   this.mainWindow = aWindow;
   this.tab = aTab;
   this.browser = aTab.linkedBrowser;
   this.chromeDoc = aWindow.document;
@@ -65,20 +72,20 @@ function ResponsiveUI(aWindow, aTab)
       presets = JSON.parse(Services.prefs.getCharPref("devtools.responsiveUI.presets"));
     } catch(e) {
       // User pref is malformated.
       Cu.reportError("Could not parse pref `devtools.responsiveUI.presets`: " + e);
     }
   }
 
   if (Array.isArray(presets)) {
-    this.presets = [{custom: true}].concat(presets)
+    this.presets = [{custom: true, l10n: "responsiveUI.size.custom"}].concat(presets)
   } else {
     Cu.reportError("Presets value (devtools.responsiveUI.presets) is malformated.");
-    this.presets = [{custom: true}];
+    this.presets = [{custom: true, l10n: "responsiveUI.size.custom"}];
   }
 
   // Default size. The first preset (custom) is the one that will be used.
   let bbox = this.stack.getBoundingClientRect();
 
   try {
     this.presets[0].width = Services.prefs.getIntPref("devtools.responsiveUI.customWidth");
     this.presets[0].height = Services.prefs.getIntPref("devtools.responsiveUI.customHeight");
@@ -249,50 +256,87 @@ ResponsiveUI.prototype = {
   },
 
   /**
    * Build the presets list and append it to the menupopup.
    *
    * @param aParent menupopup.
    */
   registerPresets: function RUI_registerPresets(aParent) {
-    let fragment = this.chromeDoc.createDocumentFragment();
     let doc = this.chromeDoc;
 
+    let custom = this.chromeDoc.createDocumentFragment();
+    let phones = this.chromeDoc.createDocumentFragment();
+    let tablets = this.chromeDoc.createDocumentFragment();
+    let computers = this.chromeDoc.createDocumentFragment();
+
+    phones.appendChild(doc.createElement("menuseparator"));
+    tablets.appendChild(doc.createElement("menuseparator"));
+    computers.appendChild(doc.createElement("menuseparator"));
+
     for (let i = 0; i < this.presets.length; i++) {
+      let fragment;
+      let p = this.presets[i];
       let menuitem = doc.createElement("menuitem");
+      menuitem.value = i;
+
+      if (!p.category) fragment = custom;
+      if (p.category == "phone") fragment = phones;
+      if (p.category == "tablet") fragment = tablets;
+      if (p.category == "computer") fragment = computers;
+
+      fragment.appendChild(menuitem)
+
       if (i == this.currentPreset)
         menuitem.setAttribute("selected", "true");
-      this.setMenuLabel(menuitem, this.presets[i]);
+
+      this.setMenuLabel(menuitem, p);
       fragment.appendChild(menuitem);
     }
-    aParent.appendChild(fragment);
+
+    let all = this.chromeDoc.createDocumentFragment();
+    all.appendChild(custom);
+    all.appendChild(phones);
+    all.appendChild(tablets);
+    all.appendChild(computers);
+    aParent.appendChild(all);
   },
 
   /**
    * Set the menuitem label of a preset.
    *
    * @param aMenuitem menuitem to edit.
    * @param aPreset associated preset.
    */
   setMenuLabel: function RUI_setMenuLabel(aMenuitem, aPreset) {
     let size = Math.round(aPreset.width) + "x" + Math.round(aPreset.height);
-    if (aPreset.custom) {
-      let str = this.strings.formatStringFromName("responsiveUI.customResolution", [size], 1);
-      aMenuitem.setAttribute("label", str);
-    } else {
-      aMenuitem.setAttribute("label", size);
-    }
+
+    let label;
+    if (aPreset.l10n)
+      label = this.strings.formatStringFromName(aPreset.l10n, [size], 1);
+    else
+      label = size;
+
+    aMenuitem.setAttribute("label", label);
+  },
+
+  /**
+   * Update the custom menu item with the current size.
+   */
+  updateCustomMenu: function RUI_updateCustomMenu() {
+      let menuitem = this.menulist.firstChild;
+      let preset = this.presets[0];
+      this.setMenuLabel(preset, menuitem);
   },
 
   /**
    * When a preset is selected, apply it.
    */
   presetSelected: function RUI_presetSelected() {
-    this.currentPreset = this.menulist.selectedIndex;
+    this.currentPreset = this.menulist.selectedItem.value;
     let preset = this.presets[this.currentPreset];
     this.loadPreset(preset);
   },
 
   /**
    * Apply a preset.
    *
    * @param aPreset preset to apply.
@@ -328,39 +372,37 @@ ResponsiveUI.prototype = {
 
     style = style.replace(/%width/g, this.currentWidth + "px");
     style = style.replace(/%height/g, this.currentHeight + "px");
 
     this.stack.setAttribute("style", style);
 
     // We uptate the Custom menuitem if we are not using a preset.
     if (this.presets[this.currentPreset].custom) {
-      let preset = this.presets[this.currentPreset];
+      let preset = this.presets[0];
       preset.width = this.currentWidth;
       preset.height = this.currentHeight;
 
-      let menuitem = this.menulist.firstChild.childNodes[this.currentPreset];
-      this.setMenuLabel(menuitem, preset);
+      this.updateCustomMenu();
     }
   },
 
   /**
    * Start the process of resizing the browser.
    *
    * @param aEvent
    */
   startResizing: function RUI_startResizing(aEvent) {
     let preset = this.presets[this.currentPreset];
     if (!preset.custom) {
       this.currentPreset = 0;
       preset = this.presets[0];
       preset.width = this.currentWidth;
       preset.height = this.currentHeight;
-      let menuitem = this.menulist.firstChild.childNodes[0];
-      this.setMenuLabel(menuitem, preset);
+      this.updateCustomMenu();
       this.menulist.selectedIndex = 0;
     }
     this.mainWindow.addEventListener("mouseup", this.bound_stopResizing, true);
     this.mainWindow.addEventListener("mousemove", this.bound_onDrag, true);
     this.container.style.pointerEvents = "none";
 
     this.stack.setAttribute("notransition", "true");
 
diff --git a/browser/locales/en-US/chrome/browser/devtools/responsiveUI.properties b/browser/locales/en-US/chrome/browser/devtools/responsiveUI.properties
--- a/browser/locales/en-US/chrome/browser/devtools/responsiveUI.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/responsiveUI.properties
@@ -6,12 +6,16 @@
 # You want to make that choice consistent across the developer tools.
 # A good criteria is the language in which you'd find the best
 # documentation on web development on the web.
 
 
 # LOCALIZATION NOTE  (responsiveUI.rotate): label of the rotate button.
 responsiveUI.rotate=rotate
 
-# LOCALIZATION NOTE  (responsiveUI.customResolution): label of the first item
-# in the menulist at the beginning of the toolbar. For %S is replace with the
+# LOCALIZATION NOTE  (responsiveUI.size.*): labels of the items in
+# in the menu at the beginning of the toolbar. %S is replaced with the
 # current size of the page. For example: "400x600".
-responsiveUI.customResolution=%S (custom)
+responsiveUI.size.custom=%S (custom)
+responsiveUI.size.phone320=%S (iPhone, Android)
+responsiveUI.size.phone360=%S (Android)
+responsiveUI.size.tablet1024=%S (iPad)
+responsiveUI.size.tablet1280=%S (Android Tablets)
diff --git a/browser/themes/gnomestripe/devtools/common.css b/browser/themes/gnomestripe/devtools/common.css
--- a/browser/themes/gnomestripe/devtools/common.css
+++ b/browser/themes/gnomestripe/devtools/common.css
@@ -55,17 +55,17 @@
   background-color: transparent !important;
 }
 
 .devtools-toolbarbutton[checked]:hover:active {
   background-color: hsla(210,8%,5%,.2) !important;
 }
 
 .devtools-menulist > .menulist-label-box {
-  text-align: center;
+  padding: 0 5px;
 }
 
 .devtools-menulist > .menulist-dropmarker {
   -moz-appearance: none;
   display: -moz-box;
   list-style-image: url("chrome://browser/skin/devtools/dropmarker.png");
   -moz-box-align: center;
   min-width: 16px;
diff --git a/browser/themes/pinstripe/devtools/common.css b/browser/themes/pinstripe/devtools/common.css
--- a/browser/themes/pinstripe/devtools/common.css
+++ b/browser/themes/pinstripe/devtools/common.css
@@ -60,17 +60,17 @@
   box-shadow: 0 1px 3px hsla(210,8%,5%,.25) inset, 0 1px 3px hsla(210,8%,5%,.25) inset, 0 1px 0 hsla(210,16%,76%,.15);
 }
 
 .devtools-toolbarbutton[checked]:hover:active {
   background-color: hsla(210,8%,5%,.2);
 }
 
 .devtools-menulist > .menulist-label-box {
-  text-align: center;
+  padding: 0 5px;
 }
 
 .devtools-menulist > .menulist-dropmarker {
   -moz-appearance: none;
   background-color: transparent;
   display: -moz-box;
   list-style-image: url("chrome://browser/skin/devtools/dropmarker.png");
   border-width: 0;
diff --git a/browser/themes/winstripe/devtools/common.css b/browser/themes/winstripe/devtools/common.css
--- a/browser/themes/winstripe/devtools/common.css
+++ b/browser/themes/winstripe/devtools/common.css
@@ -56,17 +56,17 @@
   color: hsl(200,100%,60%) !important;
 }
 
 .devtools-toolbarbutton[checked]:hover:active {
   background-color: hsla(211,68%,6%,.2);
 }
 
 .devtools-menulist > .menulist-label-box {
-  text-align: center;
+  padding: 0 5px;
 }
 
 .devtools-menulist > .menulist-dropmarker {
   -moz-appearance: none;
   list-style-image: url("chrome://browser/skin/devtools/dropmarker.png");
   border-width: 0;
   background-color: transparent;
 }

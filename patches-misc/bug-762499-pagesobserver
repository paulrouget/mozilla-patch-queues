# HG changeset patch
# Parent c6bd842a20a85dec13cd5991ef7427107f3fd673
Bug 762499 - The inspector should be updated when the DOM is updated.

diff --git a/browser/devtools/highlighter/Makefile.in b/browser/devtools/highlighter/Makefile.in
--- a/browser/devtools/highlighter/Makefile.in
+++ b/browser/devtools/highlighter/Makefile.in
@@ -10,16 +10,17 @@ VPATH		= @srcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 EXTRA_JS_MODULES = \
 	domplate.jsm \
 	InsideOutBox.jsm \
 	TreePanel.jsm \
 	highlighter.jsm \
+	pageobserver.jsm \
 	$(NULL)
 
 EXTRA_PP_JS_MODULES = \
 	inspector.jsm \
 	$(NULL)
 
 TEST_DIRS += test
 
diff --git a/browser/devtools/highlighter/pageobserver.jsm b/browser/devtools/highlighter/pageobserver.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/highlighter/pageobserver.jsm
@@ -0,0 +1,214 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+// FIXME: should it be in /shared/?
+// FIXME: DOMUpdate only once loaded?
+//        maybe a public method ".startDOMTracking()"
+
+let EXPORTED_SYMBOLS = ["PageObserver", "WindowObserver"];
+
+const Cu = Components.utils;
+Cu.import("resource:///modules/devtools/EventEmitter.jsm");
+
+const PAGE_EVENTS = [
+  "tabClose",
+  "tabHidden",
+  "tabVisible",
+];
+
+const WINDOW_EVENTS = [
+  "close",
+  "DOMReady",
+  "ready",
+  "DOMNodeUpdate",
+  "DOMTreeUpdate",
+  "resize",
+  "paint",
+  "reflow", // bug 453650
+];
+
+function PageObserver(aTab) {
+  this.tab = aTab;
+  this.init();
+}
+
+PageObserver.prototype = {
+  init: function() {
+    this._tabIsVisible = this.tab.selected;
+    this.windows = new Map();
+    this.tabContainer = this.tab.ownerDocument.defaultView.gBrowser.tabContainer;
+
+    let eventEmitter = new EventEmitter();
+    for (let i in eventEmitter)
+      this[i] = eventEmitter[i].bind(eventEmitter);
+
+    this.trackWindow(this.tab.linkedBrowser.contentWindow);
+    this.registerTabListeners();
+  },
+
+  destroy: function() {
+    // FIXME: call when no windows left
+    // FIXME: this.untrackAllWindows()
+    this.unregisterTabListeners();
+    this.removeAllListeners();
+
+    delete this.windows;
+    delete this.tab;
+    delete this.tabContainer;
+  },
+
+  trackWindow: function(window) {
+    if (this.windows.has(window)) {
+      // Window already tracked.
+      return;
+    }
+    let observer = new WindowObserver(window);
+    this.windows.set(window, observer);
+    for (let e of WINDOW_EVENTS)
+      observer.on(e, this.emit);
+    observer.once("close", function() {
+      this.untrackWindow(window);
+    }.bind(this));
+
+    if (window.document.readyState != "loading") {
+      this.trackInnerWindows(window, this);
+    } else {
+      observer.once("DOMReady", (function(window, pageobs, winobs) {
+        return function() this.trackInnerWindows(window, pageobs, winobs);
+      })(window, this, observer))
+    }
+
+  },
+
+  trackInnerWindows: function(parentWindow) {
+    // track exisiting iframe
+    let iframes = parentWindow.document.querySelectorAll("iframe");
+    for (let i = 0; i < iframes.length; i++) {
+      this.trackWindow(iframes[i].contentWindow);
+    }
+
+    // track future iframes
+    let observer = this.windows.get(parentWindow);
+    let self = this;
+    observer.on("DOMTreeUpdate", function(event, window, mutation) {
+      let addedNodes = mutation.addedNodes;
+      dump("DOMNodeUpdate: " + addedNodes[0] + "\n");
+      for (let i = 0; i < addedNodes.length; i++) {
+        let node = addedNodes[i];
+        let iframes = node.querySelectorAll("iframe");
+        for (let i = 0; i < iframes.length; i++) {
+          self.trackWindow(iframes[i].contentWindow);
+        }
+        if (node.nodeName instanceof HTMLIframeElement) {
+          self.trackWindow(node.contentWindow);
+        }
+      }
+    });
+  },
+
+  untrackWindow: function(window) {
+    if (!this.windows.has(window)) {
+      // Window not tracked.
+      return;
+    }
+    let observer = this.windows.get(window);
+    observer.destroy();
+    this.windows.delete(window);
+  },
+
+  registerTabListeners: function() {
+    this.tab.addEventListener("TabClose", this);
+    this.tabContainer.addEventListener("TabSelect", this);
+  },
+
+  unregisterTabListeners: function() {
+    this.tab.removeEventListener("TabClose", this);
+    this.tabContainer.removeEventListener("TabSelect", this);
+  },
+
+  handleEvent: function (aEvent) {
+    switch (aEvent.type) {
+      case "TabClose":
+        this.emit("tabClose", this.tab, aEvent);
+        this.unregisterTabListeners();
+        break;
+      case "TabSelect":
+        if (this.tab.selected) {
+          this.emit("tabVisible", this.tab, aEvent);
+          this._tabIsVisible = true;
+        } else {
+          if (this._tabIsVisible) {
+            this._tabIsVisible = false;
+            this.emit("tabHidden", this.tab, aEvent);
+          }
+        }
+        break;
+    }
+  },
+}
+
+function WindowObserver(window) {
+  this.window = window;
+  this.document = window.document;
+  this.init();
+}
+
+WindowObserver.prototype = {
+  init: function() {
+    let eventEmitter = new EventEmitter();
+    for (let i in eventEmitter)
+      this[i] = eventEmitter[i].bind(eventEmitter);
+
+    this.document.addEventListener("readystatechange", this, true);
+    this.window.addEventListener("unload", this, true);
+
+    this.registerDOMEvents();
+  },
+
+  registerDOMEvents: function() {
+    this.DOMMutationObserver = new this.window.MutationObserver(this);
+    let config = {
+      childList: true,
+      subtree: true,
+      characterData: true,
+      attributes: true,
+    };
+    this.DOMMutationObserver.observe(this.document.documentElement, config);
+  },
+
+  handleMutations: function(mutations) {
+    for (let m of mutations) {
+      if (m.type == "attributes")
+        this.emit("DOMNodeUpdate", this.window, m);
+      if (m.type == "childList")
+        this.emit("DOMTreeUpdate", this.window, m);
+    }
+  },
+
+  handleEvent: function(event) {
+    if (event.type == "readystatechange") {
+      if (this.document.readyState == "interactive")
+        this.emit("DOMReady", this.window, event);
+      if (this.document.readyState == "complete")
+        this.emit("ready", this.window, event);
+    }
+    if (event.type == "unload") { // FIXME: Are we sure we want to do that on beforeunload? What if prevented?
+        this.emit("close", this.window, event);
+    }
+  },
+
+  destroy: function() {
+    this.document.removeEventListener("readystatechange", this, true);
+    this.document.removeEventListener("unload", this, true);
+    this.DOMMutationObserver.disconnect();
+    this.removeAllListeners();
+
+    delete this.DOMMutationObserver;
+    delete this.window;
+    delete this.document;
+  },
+
+}
diff --git a/browser/devtools/highlighter/test/Makefile.in b/browser/devtools/highlighter/test/Makefile.in
--- a/browser/devtools/highlighter/test/Makefile.in
+++ b/browser/devtools/highlighter/test/Makefile.in
@@ -35,16 +35,20 @@ include $(topsrcdir)/config/rules.mk
 		browser_inspector_bug_699308_iframe_navigation.js \
 		browser_inspector_changes.js \
 		browser_inspector_ruleviewstore.js \
 		browser_inspector_invalidate.js \
 		browser_inspector_sidebarstate.js \
 		browser_inspector_treePanel_menu.js \
 		browser_inspector_pseudoclass_lock.js \
 		browser_inspector_pseudoClass_menu.js \
+		browser_pageobserver_mutations.js \
+		browser_pageobserver_pageA.html \
+		browser_pageobserver_pageB.html \
+		browser_pageobserver_pageC.html \
 		head.js \
 		$(NULL)
 
 # Disabled due to constant failures
 # 		browser_inspector_treePanel_click.js \
 
 libs::	$(_BROWSER_FILES)
 	$(INSTALL) $(foreach f,$^,"$f") $(DEPTH)/_tests/testing/mochitest/browser/$(relativesrcdir)
diff --git a/browser/devtools/highlighter/test/browser_pageobserver_mutations.js b/browser/devtools/highlighter/test/browser_pageobserver_mutations.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/highlighter/test/browser_pageobserver_mutations.js
@@ -0,0 +1,63 @@
+
+
+
+
+function test() {
+  waitForExplicitFinish();
+  function finishup() {
+    gBrowser.removeCurrentTab();
+    finish();
+  }
+
+  Cu.import("resource:///modules/devtools/pageobserver.jsm");
+
+  const URL = "http://mochi.test:8888/browser/browser/devtools/highlighter/test/browser_pageobserver_pageA.html";
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  content.location = URL;
+
+  let rootWindow = gBrowser.contentWindow;
+  let obs = new PageObserver(gBrowser.selectedTab);
+
+  obs.on("tabClose", this);
+  obs.on("tabHidden", this);
+  obs.on("tabVisible", this);
+  obs.on("close", this);
+  obs.on("DOMReady", this);
+  obs.on("ready", this);
+  obs.on("DOMNodeUpdate", this);
+  obs.on("DOMTreeUpdate", this);
+  obs.on("resize", this);
+  obs.on("reflow", this);
+
+  function buildTree(aDOMnode) {
+    if (aDOMnode.nodeType == 3) return null;
+    let node = {};
+    node.name = aDOMnode.tagName;
+    node.attributes = {};
+    node.textContent = aDOMnode.textContent;
+    for (var i = 0; i < aDOMnode.attributes.length; i++) {
+      node.attributes[aDOMnode.attributes[i].name] = aDOMnode.attributes[i].value;
+    }
+
+    node.childNodes = [];
+    for (var i = 0; i < aDOMnode.childNodes.length; i++) {
+      let newNode = buildTree(aDOMnode.childNodes[i]);
+      if (newNode)
+        node.push(newNode);
+    }
+    if (node.contentWindow &&
+        node.contentWindow.document &&
+        node.contentWindow.document.readyState == "interactive") {
+      node.childNodes.push(buildTree(aDOMnode.contentWindow.document.documentElement));
+    }
+    return node;
+  }
+
+  function startTest() {
+  }
+
+  function handleEvents() {
+  }
+}
+
diff --git a/browser/devtools/highlighter/test/browser_pageobserver_pageA.html b/browser/devtools/highlighter/test/browser_pageobserver_pageA.html
new file mode 100644
--- /dev/null
+++ b/browser/devtools/highlighter/test/browser_pageobserver_pageA.html
@@ -0,0 +1,31 @@
+<h1 foobar>page A</h1>
+<div>
+  <p>foobar A</p>
+  <iframe src="browser_pageobserver_pageB.html"></iframe>
+</div>
+
+<script>
+  window.onmessage = function(msg) {
+    if (msg.data == "A1") {
+      var p = document.querySelector("p");
+      p.id = "fooA";
+      p.setAttribute("class", "barA");
+    }
+    if (msg.data == "A2") {
+      var p = document.querySelector("p");
+      p.innerHTML = "<span>mop A</span>"
+    }
+    if (msg.data == "A3") {
+      var div = document.querySelector("div");
+      div.innerHTML = "";
+    }
+    if (msg.data == "A4") {
+      var div = document.querySelector("div");
+      div.innerHTML = "";
+      div.classList.add("classA4");
+    }
+
+    msg.source.postMessage(msg.data, "*");
+  }
+</script>
+
diff --git a/browser/devtools/highlighter/test/browser_pageobserver_pageB.html b/browser/devtools/highlighter/test/browser_pageobserver_pageB.html
new file mode 100644
--- /dev/null
+++ b/browser/devtools/highlighter/test/browser_pageobserver_pageB.html
@@ -0,0 +1,27 @@
+<h1>page B</h1>
+<div>
+  <p>foobar B</p>
+</div>
+
+<script>
+  window.onmessage = function(msg) {
+    if (msg.data == "B1") {
+      var p = document.querySelector("p");
+      p.id = "fooB";
+      p.setAttribute("class", "barB");
+    }
+    if (msg.data == "B2") {
+      var p = document.querySelector("p");
+      p.innerHTML = "<span>mop B</span>"
+    }
+    if (msg.data == "B3") {
+      var div = document.querySelector("div");
+      div.innerHTML = "";
+    }
+    if (msg.data == "B4") {
+      var div = document.querySelector("div");
+      div.innerHTML = "<iframe src=browser_pageobserver_pageC.html></iframe>";
+    }
+    msg.source.postMessage(msg.data, "*");
+  }
+</script>
diff --git a/browser/devtools/highlighter/test/browser_pageobserver_pageC.html b/browser/devtools/highlighter/test/browser_pageobserver_pageC.html
new file mode 100644
--- /dev/null
+++ b/browser/devtools/highlighter/test/browser_pageobserver_pageC.html
@@ -0,0 +1,27 @@
+<h1>page C</h1>
+<div>
+  <p>foobar C</p>
+</div>
+
+<script>
+  window.onmessage = function(msg) {
+    if (msg.data == "C1") {
+      var p = document.querySelector("p");
+      p.id = "foo";
+      p.setAttribute("class", "barC");
+    }
+    if (msg.data == "C2") {
+      var p = document.querySelector("p");
+      p.innerHTML = "<span>mopC</span>"
+    }
+    if (msg.data == "C3") {
+      var div = document.querySelector("div");
+      div.innerHTML = "";
+    }
+    if (msg.data == "C4") {
+      var div = document.querySelector("div");
+      div.innerHTML = "mopC";
+    }
+    msg.source.postMessage(msg.data, "*");
+  }
+</script>
